// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios18.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature OpaqueTypeErasure -enable-bare-slash-regex -module-name MeiVideoKit
import AVKit
import Combine
import Foundation
@_exported import MeiVideoKit
import Swift
import SwiftUI
import _AVKit_SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class ScrubbableNode<T> where T : MeiVideoKit.TimedElementRepresentable {
  public var data: T
  public var next: MeiVideoKit.ScrubbableNode<T>?
  public var previous: MeiVideoKit.ScrubbableNode<T>?
  public var firstChild: MeiVideoKit.ScrubbableNode<T>?
  public var lastChild: MeiVideoKit.ScrubbableNode<T>?
  public var currentChild: MeiVideoKit.ScrubbableNode<T>?
  public init(data: T)
  @objc deinit
}
extension MeiVideoKit.ScrubbableNode {
  public func updateCurrentChild(newTime: Foundation.Date)
  public func addChild(_ data: T)
  public var hasNextChild: Swift.Bool {
    get
  }
  public func gotoNextChild()
  public var hasPreviousChild: Swift.Bool {
    get
  }
  public func gotoPreviousChild()
  public func addNext(_ next: MeiVideoKit.ScrubbableNode<T>)
}
public struct SimpleTimedElement : MeiVideoKit.TimedElementRepresentable {
  public var id: Swift.String
  public var type: Swift.String?
  public var data: Any?
  public var startTime: Foundation.Date
  public var endTime: Foundation.Date
  public init(id: Swift.String, type: Swift.String? = nil, data: Any? = nil, startTime: Foundation.Date, endTime: Foundation.Date)
  public static var testNode: MeiVideoKit.ScrubbableNode<MeiVideoKit.SimpleTimedElement> {
    get
  }
}
public struct ActionButtonConfig {
  public let title: Swift.String
  public let symbol: Swift.String
  public let action: () -> Swift.Void
  public var isEnabled: Swift.Bool
  public init(title: Swift.String, symbol: Swift.String, action: @escaping () -> Swift.Void, isEnabled: Swift.Bool)
}
public class GenericScrubbleViewModel<T> : Combine.ObservableObject where T : MeiVideoKit.TimedElementRepresentable {
  public typealias NodeType = MeiVideoKit.ScrubbableNode<T>
  @Combine.Published @_projectedValueProperty($currentTime) public var currentTime: Foundation.TimeInterval {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $currentTime: Combine.Published<Foundation.TimeInterval>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($recentNavigation) public var recentNavigation: Foundation.Date? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $recentNavigation: Combine.Published<Foundation.Date?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($duration) public var duration: Foundation.TimeInterval {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $duration: Combine.Published<Foundation.TimeInterval>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isScrubbing) public var isScrubbing: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isScrubbing: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var currentStartAt: Foundation.Date {
    get
  }
  public var currentNode: MeiVideoKit.GenericScrubbleViewModel<T>.NodeType {
    get
    set
  }
  public func updateSecondaryNavigation()
  public init(currentNode: MeiVideoKit.GenericScrubbleViewModel<T>.NodeType)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor public class ScrubberViewModel : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($currentTime) @_Concurrency.MainActor public var currentTime: Foundation.TimeInterval {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $currentTime: Combine.Published<Foundation.TimeInterval>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($duration) @_Concurrency.MainActor public var duration: Foundation.TimeInterval {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $duration: Combine.Published<Foundation.TimeInterval>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isScrubbing) @_Concurrency.MainActor public var isScrubbing: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $isScrubbing: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @_Concurrency.MainActor public init(buttonConfigs: [MeiVideoKit.ActionButtonConfig], duration: Foundation.TimeInterval = 0.0)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public protocol TimedElementRepresentable {
  var id: Swift.String { get }
  var startTime: Foundation.Date { get }
  var endTime: Foundation.Date { get }
}
extension MeiVideoKit.TimedElementRepresentable {
  public var duration: Foundation.TimeInterval {
    get
  }
  public func isOverlapping(time: Foundation.Date) -> Swift.Bool
}
public struct VideoSegment : MeiVideoKit.TimedElementRepresentable {
  public let id: Swift.String
  public let startTime: Foundation.Date
  public let endTime: Foundation.Date
}
public struct AudioSegment : MeiVideoKit.TimedElementRepresentable {
  public let id: Swift.String
  public let startTime: Foundation.Date
  public let endTime: Foundation.Date
}
@_Concurrency.MainActor public class VideoPlayerViewModel : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($isPlaying) @_Concurrency.MainActor public var isPlaying: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  @_Concurrency.MainActor public var $isPlaying: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($currentPlayTime) @_Concurrency.MainActor public var currentPlayTime: Foundation.TimeInterval {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $currentPlayTime: Combine.Published<Foundation.TimeInterval>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($boundaryTimeInterval) @_Concurrency.MainActor public var boundaryTimeInterval: Foundation.TimeInterval {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $boundaryTimeInterval: Combine.Published<Foundation.TimeInterval>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @_Concurrency.MainActor public init(url: Foundation.URL)
  @objc deinit
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
extension MeiVideoKit.VideoPlayerViewModel {
  @_Concurrency.MainActor public func addBoundaryTimeObserver(for timeIntervals: [Foundation.TimeInterval])
  @_Concurrency.MainActor public func seek(to seconds: Foundation.TimeInterval)
}
@_Concurrency.MainActor @preconcurrency public struct FullScreenVideoPlayerView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(url: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency public init(viewModel: MeiVideoKit.VideoPlayerViewModel)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11MeiVideoKit010FullScreenB10PlayerViewV4bodyQrvp", 0) __
}

@_Concurrency.MainActor @preconcurrency public struct GenericScrubbleView<T> : SwiftUICore.View where T : MeiVideoKit.TimedElementRepresentable {
  @_Concurrency.MainActor @preconcurrency public init(viewModel: MeiVideoKit.GenericScrubbleViewModel<T>)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11MeiVideoKit19GenericScrubbleViewV4bodyQrvp", 0) __<T>
}

@_Concurrency.MainActor @preconcurrency public struct ScrubberView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(viewModel: MeiVideoKit.ScrubberViewModel)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11MeiVideoKit12ScrubberViewV4bodyQrvp", 0) __
}


extension MeiVideoKit.ScrubberViewModel : Swift.Sendable {}
extension MeiVideoKit.VideoPlayerViewModel : Swift.Sendable {}
extension MeiVideoKit.FullScreenVideoPlayerView : Swift.Sendable {}
extension MeiVideoKit.GenericScrubbleView : Swift.Sendable {}
extension MeiVideoKit.ScrubberView : Swift.Sendable {}
